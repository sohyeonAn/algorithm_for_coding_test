/**
 * 계수 정렬
 * 데이터의 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때만 사용.
 * 가장 작은 데이터의 차이가 너무 크다면 사용 할 수 없다.
 * 모든 범위를 담을 수 있는 크기의 배열을 선언.
 * 
 * 시간 복잡도
 * 모든 데이터가 양의 정수인 상황에서 데이터의 개수를 n,
 * 데이터 중 최대값의 크기를 k라고 할때, O(n+k)이다.
 * 데이터의 범위만 한정되어 있다면 효과적이면 항상 빠르게 동작한다.
 * 
 * 공간 복잡도: O(n+k)
 * 예를 들어 데이터가 0과 999,999, 단 2개만 존재한다고 해도
 * 배열의 크기가 100만 개가 되도록 선언해야 한다. 
 * 따라서 항상 사용할 수 있는 알고리즘은 아니다.
 * 
 * 
 * 동일한 값을 가지는 데이터가 여러 개 등장할 때 적합하다. 
 */

// 모든 원소의 값이 0보다 크거나 같다고 가정
const array = [7, 5, 9, 0, 3, 1, 6, 2, 9, 1, 4, 8, 0, 5, 2];

// 모든 범위를 포함하는 배열 선언(모든 값은 0으로 초기화)
let count = new Array(Math.max(...array) + 1).fill(0);

for (let i = 0; i < array.length; i++) {
  count[array[i]] += 1; // 각 데이터에 해당하는 인덱스의 값 증가
}

// 리스트에 기록된 정렬 정보 확인
for (let i = 0; i < count.length; i++) {
  for (let j = 0; j < count[i]; j++) {
    console.log(i);
  }
}